#!/usr/bin/env python3
#
# ABOUT
# Compile UI files into Python.
# This will be done for both Qt5 and Qt6, so that the packaged application
# will be compatible with both toolkit versions. When you're developing
# and don't want to install both pyuic5 and pyuic6, this tool will warn
# but continue. It is fine for development, but not for release.
#
# SEE ALSO
# https://doc.qt.io/qtforpython-5/tutorials/basictutorial/uifiles.html
# https://doc.qt.io/qtforpython-6/tutorials/basictutorial/uifiles.html
#
# LICENSE
# This program or module is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 2 of the License, or
# version 3 of the License, or (at your option) any later versison. It is
# provided for educational purposes and is distributed in the hope that
# it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
# the GNU General Public License for more details.
#
# AUTHOR
# wvengen, 2024

import glob
import os
import subprocess
import sys

try:
    import PyQt5.uic as uic5
    pyuic5_available = True
except ImportError:
    pyuic5_available = False

try:
    import PyQt6.uic as uic6
    pyuic6_available = True
except ImportError:
    pyuic6_available = False

UI_DIR = 'ui'
UIC_DIR = os.path.join('artisanlib', 'uic')

def check():
    if not pyuic5_available and not pyuic6_available:
        sys.stderr.write("Please install PyQt6, PyQt5 or preferably both.\n")
        sys.exit(1)
    if not pyuic5_available:
        sys.stderr.write("PyQt5.uic not available, please install and run this script again before committing.\n")
    if not pyuic6_available:
        sys.stderr.write("PyQt6.uic not available, please install and run this script again before committing.\n")

def build_uic(ui_path, uic_dir):
    """Processes a single .ui file and ouputs the generated files."""
    module = os.path.basename(ui_path)[:-3]
    py_filename = module + '.py'
    if pyuic5_available:
        with open(os.path.join(uic_dir, 'qt5', py_filename), 'w') as f:
            uic5.compileUi(ui_path, f, execute=True)
    if pyuic6_available:
        with open(os.path.join(uic_dir, 'qt6', py_filename), 'w') as f:
            uic6.compileUi(ui_path, f, execute=True)
    with open(os.path.join(uic_dir, py_filename), 'w') as f:
        f.write("# autogenerated by build_ui.py, do not edit\n")
        f.write("try:\n")
        f.write("  from .qt6.%s import *\n" % module)
        f.write("except ImportError:\n")
        f.write("  from .qt5.%s import *\n" % module)

def process_dir(ui_dir = UI_DIR, uic_dir = UIC_DIR):
    """Processes all .ui files and outputs the generated files."""
    for filename in os.listdir(UI_DIR):
        if filename.endswith('.ui'):
            build_uic(os.path.join(ui_dir, filename), uic_dir)

if __name__ == '__main__':
    check()
    process_dir()
